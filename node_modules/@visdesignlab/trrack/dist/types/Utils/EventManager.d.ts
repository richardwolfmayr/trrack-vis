import { SubscriberFunction, ArtifactSubscriberFunction } from '../Interfaces/Provenance';
import { Diff, ProvenanceNode } from '../Interfaces/NodeInterfaces';
export interface EventManager<T, S, A> {
    callEvents: (diffs: Diff[], state: T, node: ProvenanceNode<T, S, A>) => void;
    addObserver: (propPath: string[], func: SubscriberFunction<T>) => void;
    addGlobalObserver: (func: SubscriberFunction<T>) => void;
    addArtifactObserver: (func: ArtifactSubscriberFunction<A>) => void;
}
export declare function initEventManager<T, S, A>(): EventManager<T, S, A>;
