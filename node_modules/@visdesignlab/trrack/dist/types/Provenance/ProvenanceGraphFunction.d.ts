import { ProvenanceGraph } from '../Interfaces/ProvenanceGraph';
import { NodeID, NodeMetadata, Artifacts, Extra } from '../Interfaces/NodeInterfaces';
import { ActionFunction } from '../Interfaces/Provenance';
export declare function createProvenanceGraph<T, S, A>(state: T): ProvenanceGraph<T, S, A>;
export declare function goToNode<T, S, A>(graph: ProvenanceGraph<T, S, A>, id: NodeID): ProvenanceGraph<T, S, A>;
export declare function importState<T, S, A>(graph: ProvenanceGraph<T, S, A>, initalState: T, importedState: T): ProvenanceGraph<T, S, A>;
export declare function addExtraToNodeArtifact<T, S, A>(graph: ProvenanceGraph<T, S, A>, id: NodeID, extra: A): ProvenanceGraph<T, S, A>;
export declare function addAnnotationToNode<T, S, A>(graph: ProvenanceGraph<T, S, A>, id: NodeID, annotation: string): ProvenanceGraph<T, S, A>;
export declare function getExtraFromArtifact<T, S, A>(graph: ProvenanceGraph<T, S, A>, id: NodeID): Extra<A>[];
export declare function applyActionFunction<T, S, A>(graph: ProvenanceGraph<T, S, A>, label: string, action: ActionFunction<T>, complex: boolean, ephemeral: boolean, args?: any[], metadata?: NodeMetadata<S>, artifacts?: Partial<Artifacts<A>>): ProvenanceGraph<T, S, A>;
