import { NodeMetadata, Artifacts } from './NodeInterfaces';
import Provenance, { ActionFunction } from './Provenance';
/**
 * @template T Reprents the given state of an application as defined in initProvenance.
 * @template S Reprents the given event types in your application. Event types are used to differentiate between different actions that create nodes.
 * @template A Reprents the given "extra" type for storing metadata. Extra is a way to store customized metadata.
 */
export declare class Action<T, S, A> {
    label: string;
    action: ActionFunction<T>;
    args?: any[];
    metadata: NodeMetadata<S>;
    artifacts: Artifacts<A>;
    eventType?: S;
    complex?: boolean;
    ephemeral?: boolean;
    prov: Provenance<T, S, A>;
    /**
     * Creates a new Action with the given label and Action Function. Not intended to be a public function.
     */
    constructor(label: string, a: ActionFunction<T>, prov: Provenance<T, S, A>);
    /**
     * Edits the label associated with this action
     */
    addLabel(label: string): Action<T, S, A>;
    /**
     * Edits the action function associated with this function.
     * The action function is the function that changes the state of the new node.
     * See Provenance.ts for more documentation on the ActionFunction type.
     */
    addAction(action: ActionFunction<T>): Action<T, S, A>;
    /**
     * Adds arguments to be sent to the ActionFunction as extra parameters.
     */
    addArgs(args: any[]): Action<T, S, A>;
    /**
     * Changes the metadata object associated with this action.
     * See Provenance.ts for more documentation on the NodeMetadata type.
     */
    addMetadata(metadata: NodeMetadata<S>): Action<T, S, A>;
    /**
     * Changes the Artifacts object associated with this action.
     * See Provenance.ts for more documentation on the Artifacts type.
     */
    addArtifacts(artifacts: Artifacts<A>): Action<T, S, A>;
    addExtra(extra: A): this;
    /**
     * Changes the event type within the NodeMetadata object associated with this action
     * See Provenance.ts for more documentation on the NodeMetadata type.
     */
    addEventType(eventType: S): Action<T, S, A>;
    /**
     * Tells provenance whether or not you want to store the entire state of the application on this node,
     * or if you would like to store a diff from the last state node. If true, the entire state will always be stored.
     * If false, the entire state will only be stored when deemed necessary based on the difference from the previos state.
     *
     * There is no difference in how you interact with this node. False by default.
     */
    alwaysStoreState(b: boolean): Action<T, S, A>;
    /**
     * Tells provenance whether or not you want to store the entire state of the application on this node,
     * or if you would like to store a diff from the last state node. If true, the entire state will always be stored.
     * If false, the entire state will only be stored when deemed necessary based on the difference from the previos state.
     *
     * There is no difference in how you interact with this node. False by default.
     */
    isEphemeral(b: boolean): Action<T, S, A>;
    /**
     * Applies this action the provenance graph. Results in a node being created and set as the current node.
     */
    applyAction(): void;
}
