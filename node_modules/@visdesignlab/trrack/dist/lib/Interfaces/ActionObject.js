"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Action = void 0;
/**
 * @template T Reprents the given state of an application as defined in initProvenance.
 * @template S Reprents the given event types in your application. Event types are used to differentiate between different actions that create nodes.
 * @template A Reprents the given "extra" type for storing metadata. Extra is a way to store customized metadata.
 */
var Action = /** @class */ (function () {
    /**
     * Creates a new Action with the given label and Action Function. Not intended to be a public function.
     */
    function Action(label, a, prov) {
        this.label = label;
        this.action = a;
        this.args = undefined;
        this.metadata = {};
        this.artifacts = {
            extra: []
        };
        this.eventType = undefined;
        this.complex = false;
        this.prov = prov;
    }
    /**
     * Edits the label associated with this action
     */
    Action.prototype.addLabel = function (label) {
        this.label = label;
        return this;
    };
    /**
     * Edits the action function associated with this function.
     * The action function is the function that changes the state of the new node.
     * See Provenance.ts for more documentation on the ActionFunction type.
     */
    Action.prototype.addAction = function (action) {
        this.action = action;
        return this;
    };
    /**
     * Adds arguments to be sent to the ActionFunction as extra parameters.
     */
    Action.prototype.addArgs = function (args) {
        this.args = args;
        return this;
    };
    /**
     * Changes the metadata object associated with this action.
     * See Provenance.ts for more documentation on the NodeMetadata type.
     */
    Action.prototype.addMetadata = function (metadata) {
        this.metadata = metadata;
        return this;
    };
    /**
     * Changes the Artifacts object associated with this action.
     * See Provenance.ts for more documentation on the Artifacts type.
     */
    Action.prototype.addArtifacts = function (artifacts) {
        this.artifacts = artifacts;
        return this;
    };
    Action.prototype.addExtra = function (extra) {
        this.artifacts.extra.push({
            time: Date.now(),
            e: extra
        });
        return this;
    };
    /**
     * Changes the event type within the NodeMetadata object associated with this action
     * See Provenance.ts for more documentation on the NodeMetadata type.
     */
    Action.prototype.addEventType = function (eventType) {
        this.eventType = eventType;
        return this;
    };
    /**
     * Tells provenance whether or not you want to store the entire state of the application on this node,
     * or if you would like to store a diff from the last state node. If true, the entire state will always be stored.
     * If false, the entire state will only be stored when deemed necessary based on the difference from the previos state.
     *
     * There is no difference in how you interact with this node. False by default.
     */
    Action.prototype.alwaysStoreState = function (b) {
        this.complex = b;
        return this;
    };
    /**
     * Tells provenance whether or not you want to store the entire state of the application on this node,
     * or if you would like to store a diff from the last state node. If true, the entire state will always be stored.
     * If false, the entire state will only be stored when deemed necessary based on the difference from the previos state.
     *
     * There is no difference in how you interact with this node. False by default.
     */
    Action.prototype.isEphemeral = function (b) {
        this.ephemeral = b;
        return this;
    };
    /**
     * Applies this action the provenance graph. Results in a node being created and set as the current node.
     */
    Action.prototype.applyAction = function () {
        this.prov.applyAction(this.label, this.action, this.args, this.metadata, this.artifacts, this.eventType, this.complex, this.ephemeral);
    };
    return Action;
}());
exports.Action = Action;
//# sourceMappingURL=ActionObject.js.map