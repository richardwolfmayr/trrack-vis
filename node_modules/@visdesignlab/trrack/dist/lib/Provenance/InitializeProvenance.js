"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var applyChange = require('deep-diff').applyChange;
require("firebase/database");
require("firebase/firestore");
var DeepCopy_1 = require("../Utils/DeepCopy");
var FirebaseFunctions_1 = require("./FirebaseFunctions");
var ActionObject_1 = require("../Interfaces/ActionObject");
var NodeInterfaces_1 = require("../Interfaces/NodeInterfaces");
var ProvenanceGraphFunction_1 = require("./ProvenanceGraphFunction");
var EventManager_1 = require("../Utils/EventManager");
var DeepDiff_1 = require("../Utils/DeepDiff");
var decompressFromEncodedURIComponent = require('lz-string').decompressFromEncodedURIComponent;
var compressToEncodedURIComponent = require('lz-string').compressToEncodedURIComponent;
function initProvenance(initialState, loadFromUrl, storeFirebase, firebaseConfig) {
    if (loadFromUrl === void 0) { loadFromUrl = true; }
    if (storeFirebase === void 0) { storeFirebase = false; }
    var graph = ProvenanceGraphFunction_1.createProvenanceGraph(initialState);
    var initalStateRecord = DeepCopy_1.default(initialState);
    var EM = EventManager_1.initEventManager();
    var surroundChars = '||';
    var store = undefined;
    var log;
    if (storeFirebase && firebaseConfig) {
        store = FirebaseFunctions_1.initializeFirebase(firebaseConfig);
        log = FirebaseFunctions_1.logToFirebase(store === null || store === void 0 ? void 0 : store.db);
    }
    function loadUrl() {
        if (!window || !window.location || !window.location.href) {
            throw new Error('Please use in a browser environment, or set loadFromUrl parameter in initProvenance to false');
        }
        var url = new URL(window.location.href);
        var params = new URLSearchParams(url.search);
        if (params.get('provState') === null) {
            return;
        }
        var importString = params.get('provState');
        var importedState = JSON.parse(decompressFromEncodedURIComponent(importString));
        importStateAndAddNode(importedState);
    }
    function curr() {
        return graph.nodes[graph.current];
    }
    function triggerEvents(oldState) {
        var currentState = graph.nodes[graph.current].getState();
        var diffs = DeepDiff_1.default(oldState, currentState);
        EM.callEvents(diffs || [], currentState, curr());
    }
    function importStateAndAddNode(state, newLabel, newMetadata) {
        graph = ProvenanceGraphFunction_1.importState(graph, initalStateRecord, state);
        if (newLabel !== undefined) {
            graph.nodes[graph.current].label = newLabel;
        }
        if (newMetadata !== undefined) {
            graph.nodes[graph.current].metadata = newMetadata;
        }
    }
    function addStateToURL(stateString) {
        if (!loadFromUrl) {
            return;
        }
        var url = new URL(window.location.href);
        var params = new URLSearchParams(url.search);
        var importString = params.delete('provState');
        params.set('provState', stateString);
        window.history.replaceState({}, '', url.pathname + "?" + params);
    }
    function createStateString(partial) {
        var exportedState = {};
        var currentState = graph.nodes[graph.current].getState();
        if (partial) {
            Object.keys(currentState).forEach(function (key) {
                var _a;
                var prev = initalStateRecord[key];
                var curr = currentState[key];
                if (JSON.stringify(prev) !== JSON.stringify(curr)) {
                    exportedState = __assign(__assign({}, exportedState), (_a = {}, _a[key] = currentState[key], _a));
                }
            });
        }
        else {
            exportedState = __assign({}, currentState);
        }
        var exportedStateObject = exportedState;
        var compressedString = compressToEncodedURIComponent(JSON.stringify(exportedStateObject));
        return "" + compressedString;
    }
    return {
        graph: function () { return DeepCopy_1.default(graph); },
        current: function () { return DeepCopy_1.default(graph.nodes[graph.current]); },
        root: function () { return DeepCopy_1.default(graph.nodes[graph.root]); },
        addAction: function (label, action) {
            var a = new ActionObject_1.Action(label, action, this);
            return a;
        },
        applyAction: function (label, action, args, metadata, artifacts, eventType, complex, ephemeral) {
            if (metadata === void 0) { metadata = {}; }
            if (complex === void 0) { complex = false; }
            if (ephemeral === void 0) { ephemeral = false; }
            var oldState = DeepCopy_1.default(graph.nodes[graph.current].getState());
            if (eventType) {
                metadata.type = eventType;
            }
            graph = ProvenanceGraphFunction_1.applyActionFunction(graph, label, action, complex, ephemeral, args, metadata, artifacts);
            triggerEvents(oldState);
            addStateToURL(createStateString(false));
            if (storeFirebase) {
                log(graph);
            }
            return graph.nodes[graph.current].getState();
        },
        goToNode: function (id) {
            var oldState = DeepCopy_1.default(graph.nodes[graph.current].getState());
            graph = ProvenanceGraphFunction_1.goToNode(graph, id);
            triggerEvents(oldState);
            addStateToURL(createStateString(false));
        },
        addExtraToNodeArtifact: function (id, extra) {
            graph = ProvenanceGraphFunction_1.addExtraToNodeArtifact(graph, id, extra);
            EM.callEvents([], graph.nodes[id].getState(), graph.nodes[id]);
        },
        addAnnotationToNode: function (id, annotation) {
            graph = ProvenanceGraphFunction_1.addAnnotationToNode(graph, id, annotation);
            EM.callEvents([], graph.nodes[id].getState(), graph.nodes[id]);
        },
        getExtraFromArtifact: function (id) {
            return ProvenanceGraphFunction_1.getExtraFromArtifact(graph, id);
        },
        goBackOneStep: function () {
            var oldState = DeepCopy_1.default(graph.nodes[graph.current].getState());
            var current = graph.nodes[graph.current];
            if (NodeInterfaces_1.isChildNode(current)) {
                graph = ProvenanceGraphFunction_1.goToNode(graph, current.parent);
            }
            else {
                throw new Error('Already at root');
            }
            triggerEvents(oldState);
            addStateToURL(createStateString(false));
        },
        goBackNSteps: function (n) {
            var oldState = DeepCopy_1.default(graph.nodes[graph.current].getState());
            var num = n;
            var tempGraph = DeepCopy_1.default(graph);
            while (n > 0) {
                var current = tempGraph.nodes[tempGraph.current];
                if (NodeInterfaces_1.isChildNode(current)) {
                    tempGraph = ProvenanceGraphFunction_1.goToNode(graph, current.parent);
                }
                else {
                    throw new Error("Cannot go back " + num + " steps. Reached root after " + (num - n) + " steps");
                }
                n--;
            }
            graph = tempGraph;
            triggerEvents(oldState);
            addStateToURL(createStateString(false));
        },
        goBackToNonEphemeral: function () {
            var oldState = DeepCopy_1.default(graph.nodes[graph.current].getState());
            var tempGraph = DeepCopy_1.default(graph);
            var currNode = tempGraph.nodes[tempGraph.current];
            while (true) {
                if (NodeInterfaces_1.isChildNode(currNode)) {
                    tempGraph = ProvenanceGraphFunction_1.goToNode(graph, currNode.parent);
                    if (!tempGraph.nodes[tempGraph.current].ephemeral) {
                        break;
                    }
                    currNode = tempGraph.nodes[tempGraph.current];
                }
                else {
                    tempGraph = ProvenanceGraphFunction_1.goToNode(tempGraph, tempGraph.root);
                    break;
                }
            }
            graph = tempGraph;
            triggerEvents(oldState);
            addStateToURL(createStateString(false));
        },
        goForwardToNonEphemeral: function () {
            var oldState = DeepCopy_1.default(graph.nodes[graph.current].getState());
            var tempGraph = DeepCopy_1.default(graph);
            var currNode = tempGraph.nodes[tempGraph.current];
            while (true) {
                if (currNode.children.length > 0) {
                    tempGraph = ProvenanceGraphFunction_1.goToNode(tempGraph, currNode.children.reverse()[0]);
                    if (!tempGraph.nodes[tempGraph.current].ephemeral) {
                        break;
                    }
                    currNode = tempGraph.nodes[tempGraph.current];
                }
                else {
                    throw new Error('Already at the latest node in this branch or no non ephemeral nodes later');
                }
            }
            graph = tempGraph;
            triggerEvents(oldState);
            addStateToURL(createStateString(false));
        },
        goForwardOneStep: function () {
            var oldState = DeepCopy_1.default(graph.nodes[graph.current].getState());
            var current = graph.nodes[graph.current];
            if (current.children.length > 0) {
                graph = ProvenanceGraphFunction_1.goToNode(graph, current.children.reverse()[0]);
            }
            else {
                throw new Error('Already at the latest node in this branch');
            }
            triggerEvents(oldState);
            addStateToURL(createStateString(false));
        },
        reset: function () {
            var oldState = DeepCopy_1.default(graph.nodes[graph.current].getState());
            graph = ProvenanceGraphFunction_1.goToNode(graph, graph.root);
            triggerEvents(oldState);
            addStateToURL(createStateString(false));
        },
        done: function () {
            if (loadFromUrl) {
                var oldState = DeepCopy_1.default(graph.nodes[graph.current].getState());
                loadUrl();
                triggerEvents(oldState);
            }
        },
        addObserver: function (propPath, func) {
            var state = graph.nodes[graph.current].getState();
            var path = state;
            propPath.forEach(function (prop) {
                var keys = Object.keys(path);
                if (!keys.includes(prop))
                    throw new Error("Path " + propPath.join('.') + " does not exist");
                path = path[prop];
            });
            EM.addObserver(propPath, func);
        },
        addGlobalObserver: function (func) {
            EM.addGlobalObserver(func);
        },
        addArtifactObserver: function (func) {
            EM.addArtifactObserver(func);
        },
        exportState: function (partial) {
            if (partial === void 0) { partial = false; }
            return createStateString(partial);
        },
        importState: function (importString) {
            var oldState = DeepCopy_1.default(graph.nodes[graph.current].getState());
            var importedStates = JSON.parse(decompressFromEncodedURIComponent(importString.replace('||', '')));
            var state = __assign(__assign({}, graph.nodes[graph.current].getState()), importedStates);
            importStateAndAddNode(state);
            triggerEvents(oldState);
        },
        importLinearStates: function (states, labels, metadata) {
            for (var j = 0; j < states.length; j++) {
                var oldState = DeepCopy_1.default(graph.nodes[graph.current].getState());
                if (labels !== undefined && metadata !== undefined) {
                    importStateAndAddNode(states[j], labels[j], metadata[j]);
                }
                else {
                    importStateAndAddNode(states[j]);
                }
                triggerEvents(oldState);
            }
        },
        exportProvenanceGraph: function () { return JSON.stringify(graph); },
        getDiffFromNode: function (id) {
            var node = graph.nodes[id];
            if (NodeInterfaces_1.isChildNode(node)) {
                var diff = DeepDiff_1.default(graph.nodes[node.parent].getState(), node.getState());
                if (diff === undefined) {
                    return [];
                }
                else {
                    return diff;
                }
            }
            else {
                console.log("Cannot get diff from root node");
                return [];
            }
        },
        setBookmark: function (id, b) {
            graph.nodes[id].bookmarked = b;
        },
        getBookmark: function (id) {
            return graph.nodes[id].bookmarked;
        },
        importProvenanceGraph: function (importString) {
            var oldState = DeepCopy_1.default(graph.nodes[graph.current].getState());
            graph = JSON.parse(importString);
            var _loop_1 = function (c) {
                var curr_1 = graph.nodes[c];
                if (!NodeInterfaces_1.isDiffNode(curr_1)) {
                    var state_2 = DeepCopy_1.default(curr_1.state);
                    curr_1.getState = function () {
                        return state_2;
                    };
                }
                else {
                    var _state = graph.nodes[curr_1.lastStateNode].state;
                    var state_3 = DeepCopy_1.default(_state);
                    var diffsTemp = curr_1.diffs;
                    if (diffsTemp.length === 0) {
                        return { value: state_3 };
                    }
                    diffsTemp.forEach(function (diff) {
                        applyChange(state_3, null, diff);
                    });
                    return { value: state_3 };
                }
            };
            for (var c in graph.nodes) {
                var state_1 = _loop_1(c);
                if (typeof state_1 === "object")
                    return state_1.value;
            }
            triggerEvents(oldState);
        }
    };
}
exports.default = initProvenance;
//# sourceMappingURL=InitializeProvenance.js.map