"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initEventManager = void 0;
var NodeInterfaces_1 = require("../Interfaces/NodeInterfaces");
var GLOBAL = 'GLOBAL';
var ARTIFACT = 'ARTIFACT';
function initEventManager() {
    var eventRegistry = {};
    var artifactEventRegistry = {};
    function callGlobalEvents(state) {
        if (eventRegistry[GLOBAL] && eventRegistry[GLOBAL].length > 0) {
            eventRegistry[GLOBAL].forEach(function (f) { return f(state); });
        }
    }
    function callArtifactEvents(node) {
        if (artifactEventRegistry[ARTIFACT] && artifactEventRegistry[ARTIFACT].length > 0) {
            if (NodeInterfaces_1.isChildNode(node)) {
                if (node.artifacts.extra) {
                    var extra_1 = node.artifacts.extra || [];
                    artifactEventRegistry[ARTIFACT].forEach(function (f) { return f(extra_1); });
                }
            }
        }
    }
    return {
        addGlobalObserver: function (func) {
            if (!eventRegistry[GLOBAL]) {
                eventRegistry[GLOBAL] = [];
            }
            eventRegistry[GLOBAL].push(func);
        },
        addObserver: function (propPath, func) {
            var path = propPath.join('|');
            if (!eventRegistry[path]) {
                eventRegistry[path] = [];
            }
            eventRegistry[path].push(func);
        },
        addArtifactObserver: function (func) {
            if (!artifactEventRegistry[ARTIFACT]) {
                artifactEventRegistry[ARTIFACT] = [];
            }
            artifactEventRegistry[ARTIFACT].push(func);
        },
        callEvents: function (diffs, state, node) {
            if (NodeInterfaces_1.isChildNode(node)) {
                callArtifactEvents(node);
            }
            if (diffs.length === 0)
                return;
            callGlobalEvents(state);
            var diffStrings = [];
            diffs.forEach(function (diff) {
                var pathArr = diff.path;
                var changedPaths = [];
                var diffStr = pathArr.join('|');
                if (!diffStrings.includes(diffStr)) {
                    diffStrings.push(diffStr);
                }
                else {
                    return;
                }
                pathArr.forEach(function (path) {
                    if (changedPaths.length === 0) {
                        changedPaths.push(path);
                    }
                    else {
                        changedPaths.push([changedPaths.reverse()[0], path].join('|'));
                    }
                });
                changedPaths.reverse().forEach(function (cp) {
                    if (eventRegistry[cp]) {
                        eventRegistry[cp].forEach(function (f) { return f(state); });
                    }
                });
            });
        }
    };
}
exports.initEventManager = initEventManager;
//# sourceMappingURL=EventManager.js.map